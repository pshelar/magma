From 85ec8a9c1d414502e695149677d1ddbe82bcbf7f Mon Sep 17 00:00:00 2001
From: Pravin B Shelar <pbshelar@fb.com>
Date: Mon, 30 Nov 2020 13:48:36 -0800
Subject: [PATCH 7/9] gtp: add support for netlink GTP dev

---
 datapath/linux/compat/include/linux/if_link.h | 18 +++++++--
 lib/dpif-netlink-rtnl.c                       | 37 +++++++++++++++++--
 2 files changed, 47 insertions(+), 8 deletions(-)

diff --git a/datapath/linux/compat/include/linux/if_link.h b/datapath/linux/compat/include/linux/if_link.h
index 092d79468..bb263a129 100644
--- a/datapath/linux/compat/include/linux/if_link.h
+++ b/datapath/linux/compat/include/linux/if_link.h
@@ -177,11 +177,21 @@ enum ifla_gtp_role {
 };
 #endif
 
-#ifndef HAVE_IFLA_GTP_ROLE
-
 enum {
-	IFLA_GTP_ROLE = (IFLA_GTP_PDP_HASHSIZE + 1)
+#define IFLA_GTP_UNSPEC rpl_IFLA_GTP_UNSPEC
+	IFLA_GTP_UNSPEC,
+#define IFLA_GTP_FD0 rpl_IFLA_GTP_FD0
+	IFLA_GTP_FD0,
+#define IFLA_GTP_FD1 rpl_IFLA_GTP_FD1
+	IFLA_GTP_FD1,
+#define IFLA_GTP_PDP_HASHSIZE rpl_IFLA_GTP_PDP_HASHSIZE
+	IFLA_GTP_PDP_HASHSIZE,
+#define IFLA_GTP_ROLE rpl_IFLA_GTP_ROLE
+	IFLA_GTP_ROLE,
+#define IFLA_GTP_COLLECT_METADATA rpl_IFLA_GTP_COLLECT_METADATA
+	IFLA_GTP_COLLECT_METADATA,
+#define __IFLA_GTP_MAX rpl___IFLA_GTP_MAX
+	__IFLA_GTP_MAX,
 };
-#endif
 
 #endif
diff --git a/lib/dpif-netlink-rtnl.c b/lib/dpif-netlink-rtnl.c
index fd157ce2d..9db6d925f 100644
--- a/lib/dpif-netlink-rtnl.c
+++ b/lib/dpif-netlink-rtnl.c
@@ -20,6 +20,7 @@
 
 #include <net/if.h>
 #include <linux/ip.h>
+#include <linux/if_link.h>
 #include <linux/rtnetlink.h>
 
 #include "dpif-netlink.h"
@@ -58,6 +59,10 @@ VLOG_DEFINE_THIS_MODULE(dpif_netlink_rtnl);
 #define IFLA_GENEVE_UDP_ZERO_CSUM6_RX 10
 #endif
 
+#ifndef IFLA_GTP_COLLECT_METADATA
+#define IFLA_GTP_COLLECT_METADATA 5
+#endif
+
 static const struct nl_policy rtlink_policy[] = {
     [IFLA_LINKINFO] = { .type = NL_A_NESTED },
 };
@@ -112,7 +117,9 @@ vport_type_to_kind(enum ovs_vport_type type,
             return NULL;
         }
     case OVS_VPORT_TYPE_GTPU:
-        return NULL;
+        if (tnl_cfg->pt_mode == NETDEV_PT_LEGACY_L3) {
+            return "gtp";
+        } 
     case OVS_VPORT_TYPE_NETDEV:
     case OVS_VPORT_TYPE_INTERNAL:
     case OVS_VPORT_TYPE_LISP:
@@ -223,6 +230,24 @@ dpif_netlink_rtnl_gre_verify(const struct netdev_tunnel_config OVS_UNUSED *tnl,
     return err;
 }
 
+static int
+dpif_netlink_rtnl_gtp_verify(const struct netdev_tunnel_config OVS_UNUSED *tnl,
+                             const char *kind, struct ofpbuf *reply)
+{
+    struct nlattr *gre[ARRAY_SIZE(gre_policy)];
+    int err;
+
+    err = rtnl_policy_parse(kind, reply, gre_policy, gre,
+                            ARRAY_SIZE(gre_policy));
+    if (!err) {
+        if (!nl_attr_get_flag(gre[IFLA_GTP_COLLECT_METADATA])) {
+            err = EINVAL;
+        }
+    }
+
+    return err;
+}
+
 static int
 dpif_netlink_rtnl_geneve_verify(const struct netdev_tunnel_config *tnl_cfg,
                                 const char *kind, struct ofpbuf *reply)
@@ -275,11 +300,13 @@ dpif_netlink_rtnl_verify(const struct netdev_tunnel_config *tnl_cfg,
     case OVS_VPORT_TYPE_GENEVE:
         err = dpif_netlink_rtnl_geneve_verify(tnl_cfg, kind, reply);
         break;
+    case OVS_VPORT_TYPE_GTPU:
+        err = dpif_netlink_rtnl_gtp_verify(tnl_cfg, kind, reply);
+        break;
     case OVS_VPORT_TYPE_NETDEV:
     case OVS_VPORT_TYPE_INTERNAL:
     case OVS_VPORT_TYPE_LISP:
     case OVS_VPORT_TYPE_STT:
-    case OVS_VPORT_TYPE_GTPU:
     case OVS_VPORT_TYPE_UNSPEC:
     case __OVS_VPORT_TYPE_MAX:
     default:
@@ -357,11 +384,13 @@ dpif_netlink_rtnl_create(const struct netdev_tunnel_config *tnl_cfg,
         nl_msg_put_u8(&request, IFLA_GENEVE_UDP_ZERO_CSUM6_RX, 1);
         nl_msg_put_be16(&request, IFLA_GENEVE_PORT, tnl_cfg->dst_port);
         break;
+    case OVS_VPORT_TYPE_GTPU:
+        nl_msg_put_flag(&request, IFLA_GTP_COLLECT_METADATA);
+        break;
     case OVS_VPORT_TYPE_NETDEV:
     case OVS_VPORT_TYPE_INTERNAL:
     case OVS_VPORT_TYPE_LISP:
     case OVS_VPORT_TYPE_STT:
-    case OVS_VPORT_TYPE_GTPU:
     case OVS_VPORT_TYPE_UNSPEC:
     case __OVS_VPORT_TYPE_MAX:
     default:
@@ -470,12 +499,12 @@ dpif_netlink_rtnl_port_destroy(const char *name, const char *type)
     case OVS_VPORT_TYPE_ERSPAN:
     case OVS_VPORT_TYPE_IP6ERSPAN:
     case OVS_VPORT_TYPE_IP6GRE:
+    case OVS_VPORT_TYPE_GTPU:
         return dpif_netlink_rtnl_destroy(name);
     case OVS_VPORT_TYPE_NETDEV:
     case OVS_VPORT_TYPE_INTERNAL:
     case OVS_VPORT_TYPE_LISP:
     case OVS_VPORT_TYPE_STT:
-    case OVS_VPORT_TYPE_GTPU:
     case OVS_VPORT_TYPE_UNSPEC:
     case __OVS_VPORT_TYPE_MAX:
     default:
-- 
2.17.1

